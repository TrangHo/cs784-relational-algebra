= provide(:title, @problem.name)
h1= @problem.name

.row
  .col-sm-12
    = @problem.description

.row
  .col-sm-3
    - @problem.relations.each do |relation|
      .panel.panel-info
        .panel-heading
          = relation.name
        ul.list-group
          - relation.relation_attributes.each do |attr|
            li.list-group-item
              .row
                .col-sm-6
                  = attr.name
                .col-sm-6
                  = attr.attr_type
  .col-sm-9
    p Please input your answer below
    .btn-static-group aria-label="..." role="group" 
      button.btn-static.btn-static-default id="selection" data-toggle="tooltip" title="<h>Selection</h><br><b>&sigma;</b> a < b (A)<br><b>sigma</b> a < b (A)" &sigma;
      button.btn-static.btn-static-default id="projection" data-toggle="tooltip" title="<h>Projection</h><br><b>&pi;</b> a, b (A)<br><b>pi</b> a, b (A)" &pi;
      button.btn-static.btn-static-default id="join" data-toggle="tooltip" title="<h>Join</h><br>(A) <b>&#x22C8;</b> (B)<br>(A) <b>&#x22C8;</b> A.a == B.a (B)" &#x22C8;
      button.btn-static.btn-static-default id="and" data-toggle="tooltip" title="<h>And</h><br>a < 10 <b>&and;</b> a > 5 <br> a < 10 <b>and</b> a > 5" &and;
      button.btn-static.btn-static-default id="or" data-toggle="tooltip" title="<h>Or</h><br>a > 10 <b>&or;</b> a < 5 <br> a > 10 <b>or</b> a < 5" &or;
      button.btn-static.btn-static-default id="not" data-toggle="tooltip" title="<h>Not</h><br> <b>&not;</b> (a < 10) <br> <b>not</b> (a < 10)" &not;

    = text_area :code, :body

.clearfix

coffee:
  CodeMirror.defineMode 'ra', ->
    keywords = [
      'pi'
      'sigma'
      'join'
      'and'
      'or'
      'not'
    ]
    keywordsMath = [
      'π'
      'σ'
      '⨝'
    ]
    operators = [
      '>='
      '<='
      '='
      '∧'
      '∨'
      '!='
      '¬'
      '>'
      '<'
    ]

    matchAny = (stream, array, consume, successorPattern) ->
      i = 0
      while i < array.length
        needle = undefined
        if !successorPattern
          needle = array[i]
        else
          needle = new RegExp('^' + array[i] + successorPattern)
        if stream.match(needle, consume)
          return true
        i++
      false

    seperators = '([\\(\\)[\\]{\\}, \\.\\t]|$)'
    {
      startState: ->
        { inBlockComment: false }
      token: (stream, state) ->
        if state.inBlockComment
          if stream.match(/.*?\*\//, true)
            state.inBlockComment = false
          else
            stream.match /.*/, true
          'comment'
        else if !state.inBlockComment and stream.match(/^\/\*.*/, true)
          state.inBlockComment = true
          'comment'
        else if state.inInlineRelation
          if stream.match(/.*?}/, true)
            state.inInlineRelation = false
          else
            stream.match /.*/, true
          'inlineRelation'
        else if stream.match(/^{/, true)
          state.inInlineRelation = true
          'inlineRelation'
        else if stream.match(/^--[\t ]/, true)
          stream.skipToEnd()
          'comment'
        else if stream.match(/^\/\*.*?$/, true)
          'comment'
        else if matchAny(stream, keywordsMath, true)
          'keyword math'
          # needed for the correct font
        else if matchAny(stream, keywords, true, seperators)
          'keyword'
        else if matchAny(stream, operators, true)
          'operator math'
        else if stream.match(/^\[[0-9]+]/, true)
          'attribute'
        else if stream.match(/^[0-9]+(\.[0-9]+)?/, true)
          'number'
        else if stream.match(/\^'[^']*'/i, true)
          'string'
        else if stream.match(/\^[a-z]+\.[a-z]*/i, true)
          'qualified-column'
        else if stream.match(/^[\(\)\[]\{},]/i, true)
          'bracket'
        else if stream.match(/^[a-z][a-z0-9\.]*/i, true)
          'word'
        else
          stream.next()
          'else'

    }
    
  editor = undefined
  $(document).ready(->
  editor = CodeMirror.fromTextArea(document.getElementById("code_body"), {
    lineNumbers: true,
    lineWrapping: true,
    matchBrackets: true,
    autoCloseBrackets: true,
    styleActiveLine: true,
    mode: 'ra',
    })
  )

  getCursor = ->
    pos =
      line: editor.getCursor().line
      ch: editor.getCursor().ch

  $('#selection').click ->
	  editor.replaceRange('\u03C3', getCursor())
	
  $('#projection').click ->
    editor.replaceRange('\u03C0', getCursor())
 
  $('#join').click ->
    editor.replaceRange('\u22C8', getCursor())

  $('#and').click ->
    editor.replaceRange('\u2227', getCursor())

  $('#or').click ->
    editor.replaceRange('\u2228', getCursor())

  $('#not').click ->
    editor.replaceRange('\u00AC', getCursor())




  # Enabling HTML in tooltip
  $ ->
    $('[data-toggle=tooltip]').tooltip html: true, trigger: "hover"
